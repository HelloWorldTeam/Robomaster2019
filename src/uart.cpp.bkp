#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <assert.h>
#include <termios.h>
#include <string.h>
#include <sys/time.h>
#include <sys/types.h>
#include <errno.h>
#include <iostream>
#include <uart.h>
#include <thread>

using namespace std;

//static int ret;
static int fd;

/*
 * 安全读写函数
 */

ssize_t safe_write(int fd, const void *vptr, size_t n) {
    size_t nleft;
    ssize_t nwritten;
    const char *ptr;

    ptr = (char *) vptr;
    nleft = n;

    while (nleft > 0) {
        if ((nwritten = write(fd, ptr, nleft)) <= 0) {
            if (nwritten < 0 && errno == EINTR)
                nwritten = 0;
            else
                return -1;
        }
        nleft -= nwritten;
        ptr += nwritten;
    }
    return (n);
}

ssize_t safe_read(int fd, void *vptr, size_t n) {
    size_t nleft;
    ssize_t nread;
    char *ptr;

    ptr = (char *) vptr;
    nleft = n;

    while (nleft > 0) {
        if ((nread = read(fd, ptr, nleft)) < 0) {
            if (errno == EINTR)//被信号中断
                nread = 0;
            else
                return -1;
        } else if (nread == 0)
            break;
        nleft -= nread;
        ptr += nread;
        cout << "read: " << nread << "bytes\n";
    }
    return (n - nleft);
}

int uart_open(int fd, const char *pathname) {
    assert(pathname);

    /*打开串口*/
    fd = open(pathname, O_RDWR | O_NOCTTY | O_NDELAY);
    if (fd == -1) {
        perror("Open UART failed!");
        return -1;
    }

    /*清除串口非阻塞标志*/
//    if(fcntl(fd,F_SETFL,0) < 0)
//    {
//        fprintf(stderr,"fcntl failed!\n");
//        return -1;
//    }

    return fd;
}

int uart_set(int fd, int baude, int c_flow, int bits, char parity, int stop) {
    struct termios options;

    /*获取终端属性*/
    if (tcgetattr(fd, &options) < 0) {
        perror("tcgetattr error");
        return -1;
    }


    /*设置输入输出波特率，两者保持一致*/
    switch (baude) {
        case 4800:
            cfsetispeed(&options, B4800);
            cfsetospeed(&options, B4800);
            break;
        case 9600:
            cfsetispeed(&options, B9600);
            cfsetospeed(&options, B9600);
            break;
        case 115200:
            cfsetispeed(&options, B115200);
            cfsetospeed(&options, B115200);
            break;
        case 19200:
            cfsetispeed(&options, B19200);
            cfsetospeed(&options, B19200);
            break;
        case 38400:
            cfsetispeed(&options, B38400);
            cfsetospeed(&options, B38400);
            break;
        default:
            fprintf(stderr, "Unkown baude!\n");
            return -1;
    }

    /*设置控制模式*/
    options.c_cflag |= CLOCAL;//保证程序不占用串口
    options.c_cflag |= CREAD;//保证程序可以从串口中读取数据

    /*设置数据流控制*/
    switch (c_flow) {
        case 0://不进行流控制
            options.c_cflag &= ~CRTSCTS;
            break;
        case 1://进行硬件流控制
            options.c_cflag |= CRTSCTS;
            break;
        case 2://进行软件流控制
            options.c_cflag |= IXON | IXOFF | IXANY;
            break;
        default:
            fprintf(stderr, "Unkown c_flow!\n");
            return -1;
    }

    /*设置数据位*/
    switch (bits) {
        case 5:
            options.c_cflag &= ~CSIZE;//屏蔽其它标志位
            options.c_cflag |= CS5;
            break;
        case 6:
            options.c_cflag &= ~CSIZE;//屏蔽其它标志位
            options.c_cflag |= CS6;
            break;
        case 7:
            options.c_cflag &= ~CSIZE;//屏蔽其它标志位
            options.c_cflag |= CS7;
            break;
        case 8:
            options.c_cflag &= ~CSIZE;//屏蔽其它标志位
            options.c_cflag |= CS8;
            break;
        default:
            fprintf(stderr, "Unkown bits!\n");
            return -1;
    }

    /*设置校验位*/
    switch (parity) {
        /*无奇偶校验位*/
        case 'n':
        case 'N':
            options.c_cflag &= ~PARENB;//PARENB：产生奇偶位，执行奇偶校验
            //options.c_cflag &= ~INPCK;//INPCK：使奇偶校验起作用
            break;
            /*设为空格,即停止位为2位*/
        case 's':
        case 'S':
            options.c_cflag &= ~PARENB;//PARENB：产生奇偶位，执行奇偶校验
            options.c_cflag &= ~CSTOPB;//CSTOPB：使用两位停止位
            break;
            /*设置奇校验*/
        case 'o':
        case 'O':
            options.c_cflag |= PARENB;//PARENB：产生奇偶位，执行奇偶校验
            options.c_cflag |= PARODD;//PARODD：若设置则为奇校验,否则为偶校验
            options.c_cflag |= INPCK;//INPCK：使奇偶校验起作用
            options.c_cflag |= ISTRIP;//ISTRIP：若设置则有效输入数字被剥离7个字节，否则保留全部8位
            break;
            /*设置偶校验*/
        case 'e':
        case 'E':
            options.c_cflag |= PARENB;//PARENB：产生奇偶位，执行奇偶校验
            options.c_cflag &= ~PARODD;//PARODD：若设置则为奇校验,否则为偶校验
            options.c_cflag |= INPCK;//INPCK：使奇偶校验起作用
            options.c_cflag |= ISTRIP;//ISTRIP：若设置则有效输入数字被剥离7个字节，否则保留全部8位
            break;
        default:
            fprintf(stderr, "Unkown parity!\n");
            return -1;
    }

    /*设置停止位*/
    switch (stop) {
        case 1:
            options.c_cflag &= ~CSTOPB;//CSTOPB：使用两位停止位
            break;
        case 2:
            options.c_cflag |= CSTOPB;//CSTOPB：使用两位停止位
            break;
        default:
            fprintf(stderr, "Unkown stop!\n");
            return -1;
    }

    /*设置输出模式为原始输出*/
    options.c_oflag &= ~OPOST;//OPOST：若设置则按定义的输出处理，否则所有c_oflag失效

    /*设置本地模式为原始模式*/
    options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
    /*
     *ICANON：允许规范模式进行输入处理
     *ECHO：允许输入字符的本地回显
     *ECHOE：在接收EPASE时执行Backspace,Space,Backspace组合
     *ISIG：允许信号
     */

    /*设置等待时间和最小接受字符*/
    options.c_cc[VTIME] = 0;//可以在select中设置
    options.c_cc[VMIN] = 1;//最少读取一个字符

    /*如果发生数据溢出，只接受数据，但是不进行读操作*/
    tcflush(fd, TCIFLUSH);

    /*激活配置*/
    if (tcsetattr(fd, TCSANOW, &options) < 0) {
        perror("tcsetattr failed");
        return -1;
    }

    return 0;
}

int uart_read(int fd, char *r_buf, size_t len) {
    ssize_t cnt = 0;
    fd_set rfds;
    struct timeval time;

    /*将文件描述符加入读描述符集合*/
    FD_ZERO(&rfds);
    FD_SET(fd, &rfds);

    /*设置超时为5s*/
    time.tv_sec = 5;
    time.tv_usec = 0;

    /*实现串口的多路I/O*/
    int ret = select(fd + 1, &rfds, NULL, NULL, &time);
    switch (ret) {
        case -1:
            fprintf(stderr, "select error!\n");
            return -1;
        case 0:
            fprintf(stderr, "time over!\n");
            return -1;
        default:
            std::this_thread::sleep_for(std::chrono::milliseconds(50));
            cnt = read(fd, r_buf, len);
            if (cnt == -1) {
                fprintf(stderr, "read error!\n");
                return -1;
            }
            return cnt;
    }
}

int uart_write(int fd, const char *w_buf, size_t len) {
    ssize_t cnt = 0;

    cnt = safe_write(fd, w_buf, len);
    if (cnt == -1) {
        fprintf(stderr, "write error!\n");
        return -1;
    }

    return cnt;
}

int uart_close(int fd) {
    assert(fd);
    close(fd);

    /*可以在这里做些清理工作*/

    return 0;
}
int uart_send(int port_handle, double X, double Y, double Z, int type)
{
    /* configure can_id and can data length */
    char frame[9];
    //X = 0.010;Y = 0.010; Z = 1.374;
    short x100 = X*1000;
    short y100 = Y*1000;
    short z100 = Z*1000;
    frame[3] = (unsigned char)(x100 >> 8);
    frame[4] = (unsigned char)(x100);
    frame[5] = (unsigned char)(y100 >> 8);
    frame[6] = (unsigned char)(y100);
    frame[7] = (unsigned char)(z100 >> 8);
    frame[8] = (unsigned char)(z100);
    frame[0] = 0xaa;
    frame[1] = 0xbb;
    frame[2] = 0xcc;
    #ifdef __showing_send__
        printf("X Y Z is: %.3f %.3f %.3f\n",X,Y,Z);
        printf("uart send: data=");
        for (int i = 0; i < sizeof(frame); i++)
            printf("%x ", frame[i]);
        printf("\n");
    #endif
    /* Sending data */
    int nbytes = uart_write(port_handle, frame, sizeof(frame));
    if( nbytes < 0) {
        perror("Send failed");
    }
    return nbytes;
}

int uart_receive(int port_handle, char * buffer)
{
    char frame[8]={0};
    int nbytes = uart_read(port_handle, frame, sizeof(frame));

    if (nbytes != 8)
    {
        printf("nbytes %d != 8\n", nbytes);
        for (int i = 0; i < nbytes; i++)
            printf("%x ", frame[i]);
        printf("\n");
        return 0;
    }
//    if (frame.can_id == 0x3FF) {  // 手动过滤一下
//        printf("Can receive: %d ID=%#x data_length=%d data=", port_handle, frame.can_id, frame.can_dlc);
//        for (int i = 0; i < frame.can_dlc; i++)
//            printf("%#x ", frame.data[i]);
//        printf("\n");
//        memcpy(buffer, frame.data, nbytes);
//    } else {
//        nbytes = 0;
//    }
    if(frame[0]!=0x30|| frame[1]!=0x40)
    {
        printf("Head is wrong\n");
        for (int i = 0; i < nbytes; i++)
            printf("%x ", frame[i]);
        printf("\n");
        return 0;
    }

    printf("uart receive: data= ");
    for (int i = 0; i < nbytes; i++)
        printf("%x ", frame[i]);
    printf("\n");
    memcpy(buffer, frame, nbytes);


    return nbytes;
}
//int main(void)
//{
//    const char *w_buf = "something to write";
//    size_t w_len = strlen(w_buf);
//
//    char r_buf[1024];
//    bzero(r_buf,1024);
//
//    fd = uart_open(fd,"/dev/ttyUSB0");/*串口号/dev/ttySn,USB口号/dev/ttyUSBn*/
//    cout<<"uart open finished"<<endl;
//    if(fd == -1)
//    {
//        fprintf(stderr,"uart_open error\n");
//        exit(EXIT_FAILURE);
//    }
//
//    if(uart_set(fd,115200,0,8,'N',1) == -1)
//    {
//        fprintf(stderr,"uart set failed!\n");
//        exit(EXIT_FAILURE);
//    }
//    cout<<"uart set finished"<<endl;
//
//    int ret = uart_write(fd,w_buf,w_len);
//    if(ret == -1)
//    {
//        fprintf(stderr,"uart write failed!\n");
//        exit(EXIT_FAILURE);
//    }
//    cout<<"uart write finished"<<endl;
//
//    while(1)
//    {
//        ret = uart_read(fd,r_buf,1024);
//        cout<<"read: "<<ret<<"bytes\n";
//        cout<<r_buf<<endl;
//        uart_write(fd,r_buf,ret);
//        if(ret == -1)
//        {
//            fprintf(stderr,"uart read failed!\n");
//            exit(EXIT_FAILURE);
//        }
//    }
//
//    ret = uart_close(fd);
//    if(ret == -1)
//    {
//        fprintf(stderr,"uart_close error\n");
//        exit(EXIT_FAILURE);
//    }
//
//    exit(EXIT_SUCCESS);
//}
